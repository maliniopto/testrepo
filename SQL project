Danny ma has great 8 week challenge https://8weeksqlchallenge.com/case-study-7/

A. High Level Sales Analysis
What was the total quantity sold for all products?
   select sum(qty) as total_sales 
   from balanced_tree.sales ;

What is the total generated revenue for all products before discounts?
 select sum(price *qty)
 from balanced_tree.sales ;

for separate per product total revenue without sales 
select pd.product_name, sum(s.price*s.qty) as total
from balanced_tree.sales as s
inner join balanced_tree.product_details as pd on pd.product_id =s.prod_id
group by pd.product_name
order by total

What was the total discount amount for all products?
select sum(qty*price *discount) as totalrevenuediscount 
from balanced_tree.sales 


B.Transaction Analysis
How many unique transactions were there?
  select count(distinct(txn_id)) as uniqueid 
  from balanced_tree.sales
  
What is the average unique products purchased in each transaction?
      select round(avg (uniprod))  as avgprod 
from (
select distinct txn_id as unid, count(distinct prod_id)  as uniprod
from balanced_tree.sales
group by txn_id) unitb

What is the average discount value per transaction?
WITH cte_transaction_revenue AS (
  SELECT
    txn_id,
    SUM(qty * price* discount/100) AS revenue
  FROM balanced_tree.sales
  GROUP BY txn_id
)
SELECT round(avg(revenue),2) as avg_revpertransact from cte_transaction_revenue

What is the percentage split of all transactions for members vs non-members?

select 
100*round(count(distinct case when  member = 't' then 1 else txn_id end) /count(distinct txn_id),1) as true_members, 
100*round(count(distinct case when  member = 'f' then 1 else txn_id end) /count(distinct txn_id),1) as false_members
from balanced_tree.sales

What is the average revenue for member transactions and non-member transactions?
 select member, round(avg(total_rev),2) as avg_rev from
 (select txn_id, member, sum(price*qty)as total_rev  
 from balanced_tree.sales 
 group by 1,2 ) t
 group by 1
 
 Product Analysis:
 
 What are the top 3 products by total revenue before discount?
 
 select pd.product_name, sum(s.price*s.qty) as totalprice from balanced_tree.sales as s
join balanced_tree.product_details as pd on s.prod_id = pd.product_id
group by 1
order by totalprice desc
limit 3

What is the total quantity, revenue and discount for each segment?
select pd.segment_name, 
sum(s.qty) as tot_qty, 
sum(s.price*s.qty) tot_rev,  
round(sum((s.price*s.qty*s.discount)/100),2) tot_dist
from balanced_tree.sales as s
join balanced_tree.product_details as pd on s.prod_id = pd.product_id
group by 1

What is the top selling product for each segment?
with top_prod as 
(select  pd.segment_name, 
pd.product_name,
sum(s.qty) tot_qty,
dense_rank() over(partition by pd.segment_name order by sum(s.qty) desc) as ranking
from balanced_tree.sales as s
join balanced_tree.product_details as pd on s.prod_id = pd.product_id
group by 1,2
order by tot_qty desc)

select segment_name, product_name, tot_qty
from top_prod
where ranking <2
group by 1,2
 
What is the total quantity, revenue and discount for each category?
select pd.category_name, 
sum(s.qty) as tot_qty, 
sum(s.price*s.qty) tot_rev,  
round(sum((s.price*s.qty*s.discount)/100),2) tot_dist
from balanced_tree.sales as s
join balanced_tree.product_details as pd on s.prod_id = pd.product_id
group by 1

What is the top selling product for each category?
with top_prod as 
(select  pd.category_name, 
pd.product_name,
sum(s.qty) tot_qty,
dense_rank() over(partition by pd.category_name order by sum(s.qty) desc) as ranking
from balanced_tree.sales as s
join balanced_tree.product_details as pd on s.prod_id = pd.product_id
group by 1,2
order by tot_qty desc)

select category_name, product_name, tot_qty
from top_prod
where ranking <2
group by 1,2

What is the percentage split of revenue by product for each segment?
with top_prod as 
(select  pd.segment_name, 
pd.segment_id,
pd.product_name,
sum(s.price* s.qty) revenue
from balanced_tree.sales as s
join balanced_tree.product_details as pd on s.prod_id = pd.product_id
group by 1,2,3)

select *, round(100*revenue/(sum(revenue) over (partition by segment_id)),2) as percent_split
from top_prod
order by 1,2

What is the percentage split of revenue by segment for each category?
with top_prod as 
(select  pd.category_id, pd.category_name, 
pd.segment_name,
sum(s.price* s.qty) revenue
from balanced_tree.sales as s
join balanced_tree.product_details as pd on s.prod_id = pd.product_id
group by 1,2,3)

select *, round(100*revenue/(sum(revenue) over (partition by category_id)),2) as percent_split
from top_prod
order by 1,2

What is the percentage split of total revenue by category?
select pd.category_name,
pd.category_id, sum(s.price* s.qty) revenue,
round(100*sum(s.price* s.qty)/(select (sum(s1.price* s1.qty)) from balanced_tree.sales s1)) as total_revenue
from balanced_tree.sales as s
left join balanced_tree.product_details as pd on s.prod_id = pd.product_id
group by 1,2


What is the total transaction “penetration” for each product? (hint: penetration = number of transactions where at least 1 quantity of a product was purchased divided by total number of transactions)
select pd.product_name,
pd.product_id,
round(100*count(s.txn_id) / (select count(distinct txn_id) from balanced_tree.sales),2) as txn_penet
from balanced_tree.sales as s
left join balanced_tree.product_details as pd on s.prod_id = pd.product_id
group by 1,2


What is the most common combination of at least 1 quantity of any 3 products in a 1 single transaction?
with comb3 as (
select s.txn_id,s.prod_id,product_name
from balanced_tree.sales s
join balanced_tree.product_details pd on s.prod_id = pd.product_id
)
select a.product_name, b.product_name, c.product_name , count(*) as combination_count
from comb3 a inner join comb3 b
on a.txn_id = b.txn_id 
inner join comb3 c 
on b.txn_id = c.txn_id 
where a.prod_id < b.prod_id and  b.prod_id < c.prod_id
group by a.product_name, b.product_name, c.product_name 
order by 4 desc
limit 1

select p.product_name,p.segment_name, p.category_name,
sum(s.qty) as tot_qty , 
round(sum(s.price * s.qty),2) as tot_rev_wout_dist,
round(sum((s.price * s.qty * s.discount)/100),2) as revenue,
round(avg((s.price * s.qty * s.discount)/100),2) as avgrev,
sum(case when member ='t' then 1 else 0 end) * 100/count(*)  as mem_transac,
sum(case when member ='f' then 1 else 0 end) *100/count(*)   as nonmem_transac
from balanced_tree.sales s 
join balanced_tree.product_details p on s.prod_id = p.product_id
where extract( month from s.start_txn_time) = 1
group by 1,2,3
